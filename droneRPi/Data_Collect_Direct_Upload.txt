import RPi.GPIO as GPIO
import socket
import time
import json
import requests
from pymavlink import mavutil

# Set up a MAVLink connection
mav = mavutil.mavlink_connection('/dev/serial0', baud=57600)

#Initialize landing flag
landing_flag = 0

chunk_size = 10

already_sent = 0

GPS_location = "Chino Hills"

currentTime = "2023-09-28T21:48:03.257734"

collected = {
    "Landing": {"Location": GPS_location, "DateTime": currentTime},
    "Sensor data": [],
    "Chunk": 0
}

def data_transfer():
    global already_sent
    # Calculate the number of iterations needed
    num_iterations = len(collected["Sensor data"]) // chunk_size + 1
    print(num_iterations)

    # Select indices dynamically in each iteration
    for iteration in range(num_iterations):
        start_index = iteration * chunk_size
        end_index = min((iteration + 1) * chunk_size, len(collected["Sensor data"]))

        # Extract the chunk of data from one dictionary inside the list
        selected_data = collected["Sensor data"][start_index:end_index]
        
        # Create a payload for each chunk
        payload = {"Landing": collected["Landing"], "Sensor data": selected_data, "Chunk": iteration}

        # Send a request for the new dictionary
        r = requests.post("http://149.28.81.138:3000/app/sensor_data/upload", json=payload)

        print(f"Iteration {iteration + 1}: {r.text}")

    print("end")
    already_sent = True

def landing(channel): #create a flag for landing
    global landing_flag
    landing_flag = not landing_flag
    print(f"Landing: + {landing_flag}")

 #Event listener on GPIO 17
GPIO.setmode(GPIO.BCM)

GPIO.setup(17, GPIO.IN, pull_up_down=GPIO.PUD_UP) # set pin 17 as input with pull-up resistor
sending = 0

GPIO.add_event_detect(17, GPIO.BOTH, callback=landing, bouncetime = 1000) #event listener for voltage change
   
def main():
    global already_sent
    try:
        while True:
            if landing_flag == False: #runs when drone is on the air
                already_sent = 0
                msg = mav.recv_match(type='HEARTBEAT', blocking=True)
                #MAVLink_msg to dict
                dict_msg=msg.to_dict()
                print(dict_msg)
                #add dict to collected data under sensor_data
                collected["Sensor data"].append(dict_msg)
                time.sleep(1)
            elif already_sent == False:
                data_transfer() #start transfer data when the drone is on the GCS
    except Exception as e:
        print(f"Error found: {e}")
if __name__=="__main__":
    main()
